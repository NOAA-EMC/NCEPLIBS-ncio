name: Build and Test
on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      FC: gfortran-9
      CC: gcc-9
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        netcdf_version: [4.8.1]
        netcdff_version: [4.5.4]
        hdf5_version: [1.12.1]
        compiler: [gcc-9]      

    steps:

    - uses: actions/checkout@v2

    - name: install-dependencies
      run: |
        if [[ ${{ matrix.os }} == "ubuntu-latest" ]]; then
          sudo apt-get update
          sudo apt-get install libmpich-dev
          sudo apt-get install doxygen
        elif [[ ${{ matrix.os }} == "macos-latest" ]]; then
          brew update
          brew install doxygen
          brew install mpich
          if [[ ${{ matrix.compiler }} == "gcc-9" ]]; then
            sudo ln -sf /usr/local/bin/gfortran-9 /usr/local/bin/gfortran
          elif  [[ ${{ matrix.compiler }} == "gcc-10" ]]; then
            sudo ln -sf /usr/local/bin/gfortran-10 /usr/local/bin/gfortran
          fi
        fi
        python3 -m pip install gcovr

    - name: cache-netcdf
      id: cache-netcdf
      uses: actions/cache@v2
      with:
        path: ~/netcdf
        key: netcdf-c-${{ matrix.netcdf_version }}-${{ runner.os }}

    - name: build-hdf5
      if: steps.cache-netcdf.outputs.cache-hit != 'true'
      run: |
        export CC=mpicc
        hdf5_url=https://support.hdfgroup.org/ftp/HDF5/releases
        shortvers=$(echo ${{ matrix.hdf5_version }} | awk -F "." '{printf "%d.%d", $1, $2}')
        download_url=$hdf5_url/hdf5-$shortvers/hdf5-${{ matrix.hdf5_version }}/src/hdf5-${{ matrix.hdf5_version }}.tar.gz
        wget $download_url &> /dev/null
        tar -xzf hdf5-${{ matrix.hdf5_version }}.tar.gz
        pushd hdf5-${{ matrix.hdf5_version }}
        ./configure --prefix=${HOME}/netcdf --enable-parallel --disable-tools --disable-fortran --disable-cxx --enable-parallel-tests
        make -j2
        make install
           
    - name: build-netcdf-c
      if: steps.cache-netcdf.outputs.cache-hit != 'true'
      run: |
        export CC=mpicc
        export CPPFLAGS=-I${HOME}/netcdf/include
        export LDFLAGS=-L${HOME}/netcdf/lib
        wget https://downloads.unidata.ucar.edu/netcdf-c/${{ matrix.netcdf_version }}/netcdf-c-${{ matrix.netcdf_version }}.tar.gz &> /dev/null

        tar -xzf netcdf-c-${{ matrix.netcdf_version }}.tar.gz
        cd netcdf-c-${{ matrix.netcdf_version }}
        ./configure --prefix=${HOME}/netcdf --disable-dap --disable-utilities
        make -j2
        make install

    - name: build-netcdf-fortran
      if: steps.cache-netcdf.outputs.cache-hit != 'true'
      run: |
        export PATH="${HOME}/netcdf/bin:$PATH"
        export CC=mpicc
        export FC=mpifort
        export CPPFLAGS=-I${HOME}/netcdf/include
        export LDFLAGS=-L${HOME}/netcdf/lib
        wget https://github.com/Unidata/netcdf-fortran/archive/v${{ matrix.netcdff_version }}.tar.gz &> /dev/null
        tar -xzf v${{ matrix.netcdff_version }}.tar.gz
        pushd netcdf-fortran-${{ matrix.netcdff_version }}
        ./configure --prefix=${HOME}/netcdf
        make -j2
        make install   
       
    - name: build and test
      run: |
        export FC=mpifort
        export CC=mpicc
        mkdir build && cd build
        cmake .. -DENABLE_DOCS=Yes -DCMAKE_PREFIX_PATH='~;~/netcdf' -DCMAKE_Fortran_FLAGS="-g -fprofile-arcs -ftest-coverage -fprofile-abs-path -O0"
        make -j2
        ctest --output-on-failure
        gcovr -v --html-details -o test-coverage.html
    
    - uses: actions/upload-artifact@v2
      with:
        name: test-coverage
        path: NCEPLIBS-ncio/build/*.html
